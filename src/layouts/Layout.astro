---
import BaseHead from '@/layouts/BaseHead.astro'
import { getCollection } from 'astro:content'
import '../styles/layout-fix.css'
import SidebarToggle from './SidebarToggle.astro'
import { ViewTransitions } from 'astro:transitions'

let { title, description } = Astro.props
type CategoryNamesType = 'posts'
const CATEGORY_NAMES = ['posts']

// 데이터 미리 패칭
const contentsByCategory = await Promise.all(
  CATEGORY_NAMES.map(async (name: CategoryNamesType) => {
    const data = (await getCollection(name)).sort(
      (a, b) => b.data.date.valueOf() - a.data.date.valueOf()
    )
    return { name, data }
  })
)

// 현재 페이지 URL 가져오기
const currentPath = Astro.url.pathname
---

<!-- 사이드바 상태를 설정하는 즉각적인 인라인 스크립트 -->
<script is:inline>
  // 사이드바 상태 관리 함수
  function manageSidebarState() {
    try {
      const savedState = localStorage.getItem('sidebarOpen')
      if (savedState === 'false') {
        document.documentElement.classList.add('sidebar-closed-initial')
      }
    } catch (e) {
      console.error('localStorage 접근 오류:', e)
    }
  }

  // 즉시 실행하여 초기 상태 설정
  manageSidebarState()
</script>

<html lang="ko" class="bg-[var(--primary)]">
  <head>
    <BaseHead title={title} description={description} />
    <ViewTransitions />
    <style is:inline>
      /* 트랜지션 효과를 일시적으로 비활성화 */
      .no-transition * {
        transition: none !important;
      }

      /* 초기 렌더링 시 사이드바 닫힘 상태 적용 */
      html.sidebar-closed-initial body .sidebar-right {
        display: none !important;
      }

      /* 초기 사이드바 상태 */
      @media (min-width: 641px) {
        html.sidebar-closed-initial body {
          --sidebar-width: 60px !important;
        }
        html.sidebar-closed-initial body .sidebar-right {
          left: -260px !important;
          display: none !important;
        }
        html.sidebar-closed-initial body main {
          width: 90% !important;
          max-width: 900px !important;
          margin-left: auto !important;
          margin-right: auto !important;
        }
      }

      @media (max-width: 640px) {
        html.sidebar-closed-initial body .sidebar-right {
          display: none !important;
        }
      }

      /* 모든 애니메이션 효과 제거 */
      main {
        animation: none;
      }
    </style>
  </head>
  <body class="sidebar-open bg-[var(--primary)] no-transition">
    <div class="wrapper">
      <SidebarToggle contentsByCategory={contentsByCategory} currentPath={currentPath} />

      <main>
        <slot />
      </main>
    </div>

    <script>
      // 모든 사이드바 관련 로직을 하나의 클래스로 중앙화
      class SidebarManager {
        // 메모이제이션을 위한 캐시 상태 변수 추가
        private _cachedState: boolean | undefined

        constructor() {
          this.initEventListeners()
          this.applyInitialState()
        }

        // 초기 이벤트 리스너 설정
        initEventListeners() {
          document.addEventListener('DOMContentLoaded', () => this.restoreSidebarState())
          document.addEventListener('astro:after-preparation', () => this.restoreSidebarState())
          document.addEventListener('astro:page-load', () => this.handlePageLoad())
          document.addEventListener('astro:after-swap', () => this.restoreSidebarState())

          // 스크롤 이벤트 최적화
          this.setupScrollListener()
        }

        // 스크롤 이벤트 처리 (디바운스 적용)
        setupScrollListener() {
          let scrollTimer

          const handleScroll = () => {
            const sidebar = document.querySelector('.sidebar')
            if (sidebar) {
              const scrollTop = window.scrollY
              if (scrollTop > 10) {
                sidebar.classList.add('scrolled')
              } else {
                sidebar.classList.remove('scrolled')
              }
            }
          }

          const debouncedScroll = () => {
            clearTimeout(scrollTimer)
            scrollTimer = setTimeout(handleScroll, 10)
          }

          window.addEventListener('scroll', debouncedScroll)

          document.addEventListener('astro:page-load', () => {
            window.scrollTo(0, 0)
            window.addEventListener('scroll', debouncedScroll)
          })

          document.addEventListener('astro:before-swap', () => {
            window.removeEventListener('scroll', debouncedScroll)
            clearTimeout(scrollTimer)
          })
        }

        // 저장된 사이드바 상태 적용
        restoreSidebarState() {
          const savedSidebarState = this.getSavedState()
          if (savedSidebarState === false) {
            document.body.classList.remove('sidebar-open')
            document.documentElement.classList.add('sidebar-closed')
          } else {
            document.body.classList.add('sidebar-open')
            document.documentElement.classList.remove('sidebar-closed')
          }
        }

        // 페이지 로드 처리
        handlePageLoad() {
          // 초기 트랜지션 비활성화
          document.body.classList.add('no-transition')
          document.documentElement.classList.remove('loading')
          document.documentElement.classList.remove('sidebar-closed-initial')

          // 일정 시간 후 트랜지션 효과 활성화
          setTimeout(() => {
            document.body.classList.remove('no-transition')
          }, 300)

          // 사이드바 상태 복원
          this.restoreSidebarState()
        }

        // 사이드바 상태 가져오기 (메모이제이션)
        getSavedState() {
          if (typeof this._cachedState === 'undefined') {
            try {
              const savedState = localStorage.getItem('sidebarOpen')
              this._cachedState = savedState !== 'false'
            } catch (e) {
              console.error('localStorage 접근 오류:', e)
              this._cachedState = true
            }
          }
          return this._cachedState
        }

        // 초기 상태 적용
        applyInitialState() {
          this.restoreSidebarState()

          // 초기에는 트랜지션 비활성화 상태 유지
          document.body.classList.add('no-transition')

          // 일정 시간 후 트랜지션 효과 활성화
          setTimeout(() => {
            document.body.classList.remove('no-transition')
            document.documentElement.classList.remove('sidebar-closed-initial')
          }, 300)
        }
      }

      // 사이드바 매니저 초기화
      new SidebarManager()
    </script>
  </body>
</html>
